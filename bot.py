import asyncio
import base64
import database
import logging
import message_classifier
import re
import request_fuctions

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor, exceptions
from bot_config import dp
from send_message_function import send_message


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - –æ—Ç–ø—Ä–∞–≤—å /help :) ")
    # while True:
    #     if request_functions.flag_changed:
    #         await send_message(request_functions.userr_id, f'–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ‚Ññ {request_functions.sub_id} '
    #                            f'–ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ!\n–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:'
    #                            f'{request_functions.old_data}, \n–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {request_functions.neww_data}')
    #         request_functions.flag_changed = False


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–í —ç—Ç–æ–º –±–æ—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/info - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü\n"
                        "/id - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        "/chat CHAT_ID - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —á–∞—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID\n"
                        "/sheet URL RANGE - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å—Å—ã–ª–∫–µ\n")


@dp.message_handler(commands=['info'])
async def process_info_command(message: types.Message):
    await message.reply(f"–í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤: "
                        f"{len(database.get_tg_subscriptions_by_user(message.from_user.id))}\n"
                        f"–í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü: "
                        f"{len(database.get_sheet_subscriptions_by_user_id(message.from_user.id))}")


async def build_menu(message: types.Message, subscription, add_cmd, remove_cmd):
    buttons = []
    if not subscription:
        buttons.append(('üîî Subscribe', add_cmd))
    else:
        buttons.append(('‚ùå Unsubscribe', remove_cmd))
    keyboard_buttons = [InlineKeyboardButton(name, callback_data=data) for name, data in buttons]
    markup = InlineKeyboardMarkup().add(*keyboard_buttons)
    return await message.reply(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π?', reply_markup=markup)


# ----------------–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç---------------------------


@dp.message_handler(commands=['get_id'])
async def process_get_id_command(message: types.Message):
    await message.reply(f"ID –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}\n"
                        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")


@dp.callback_query_handler(text='add_chat')
async def process_add_chat(call, state):
    data = await state.get_data()
    chat_id = data['chat_id']
    database.create_tg_subscription(call.from_user.id, chat_id)
    await call.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —á–∞—Ç {chat_id}")


@dp.callback_query_handler(text='remove_chat')
async def process_remove_chat(call, state):
    data = await state.get_data()
    chat_id = data['chat_id']
    database.remove_tg_subscription(call.from_user.id, chat_id)
    await call.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —á–∞—Ç–∞ {chat_id}")


@dp.message_handler(commands=['chat'])
async def process_chat_command(message: types.Message, state):
    await message.reply(f"–£–∑–Ω–∞—Ç—å ID —á–∞—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ –≤ –Ω—É–∂–Ω–æ–π –±–µ—Å–µ–¥–µ –∫–æ–º–∞–Ω–¥—É /get_id ;)\n"
                        f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")

    chat_id = re.split(' ', message.text, maxsplit=3)
    try:
        chat_id = int(chat_id[1])
        await state.update_data(chat_id=chat_id)
    except ValueError:
        return await message.reply(f"–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ :)")

    buttons = []
    subscription = database.get_tg_subscription(user_id=message.from_user.id, chat_id=chat_id)
    return await build_menu(message, subscription, 'add_chat', 'remove_chat')


# ------------------–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã-------------------


@dp.callback_query_handler(text_contains='add_sheet')
async def process_add_sheet(call, state):
    data = await state.get_data()
    sheet_link = data['sheet_link']
    sheet_range = data['sheet_range']
    database.create_sheet_subscription(call.from_user.id, sheet_link, sheet_range)
    await call.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–µ–∫ {sheet_range} —Ç–∞–±–ª–∏—Ü—ã {sheet_link}")


@dp.callback_query_handler(text_contains='remove_sheet')
async def process_remove_sheet(call, state):
    data = await state.get_data()
    sheet_link = data['sheet_link']
    sheet_range = data['sheet_range']
    database.delete_sheet_subscription(call.from_user.id, sheet_link, sheet_range)
    await call.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–µ–∫ {sheet_range} —Ç–∞–±–ª–∏—Ü—ã {sheet_link}")


@dp.message_handler(commands=['sheet'])
async def process_sheet_command(message: types.Message, state):
    input_str = re.split(' ', message.text, maxsplit=3)
    try:
        _, sheet_link, sheet_range = input_str
        await state.update_data(sheet_link=sheet_link)
        await state.update_data(sheet_range=sheet_range)
    except ValueError:
        return await message.reply(f"–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ URL –∏–ª–∏ —è—á–µ–π–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ :)")

    subscription = database.get_sheet_subscription(user_id=message.from_user.id, sheet_link=sheet_link, sheet_range=sheet_range)
    return await build_menu(message, subscription, 'add_sheet', 'remove_sheet')


# --------------------------------------------------------


if __name__ == '__main__':
    #request_functions.req_sheets_for_update(time_between_requests=5, requests_count=10, troubleshoot_in_read_func=False,
    #                      troubleshoot_mode=False)
    executor.start_polling(dp)
