import asyncio
import base64
import logging
import re

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor, exceptions

from bot_config import dp
from send_message_function import send_message

import database
import message_classifier


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - –æ—Ç–ø—Ä–∞–≤—å /help :) ")


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–í —ç—Ç–æ–º –±–æ—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/info - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü\n"
                        "/get_id - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        "/chat CHAT_ID - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —á–∞—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID\n"
                        "/sheet URL RANGE - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å—Å—ã–ª–∫–µ\n")


@dp.message_handler(commands=['info'])
async def process_info_command(message: types.Message):
    await message.reply(f"–í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤: "
                        f"{len(database.get_tg_subscriptions_by_user(message.from_user.id))}\n"
                        f"–í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü: "
                        f"{len(database.get_sheet_subscriptions_by_user_id(message.from_user.id))}")


async def build_menu(message: types.Message, subscription, suffix: str):
    buttons = []
    if not subscription:
        buttons.append(('üîî Subscribe', f'add_{suffix}'))
    else:
        buttons.append(('‚ùå Unsubscribe', f'remove_{suffix}'))
        if not subscription.muted:
            buttons.append(('üîá Mute', f'mute_{suffix}'))
        else:
            buttons.append(('üîä Unmute', f'unmute_{suffix}'))
    keyboard_buttons = [InlineKeyboardButton(name, callback_data=data) for name, data in buttons]
    markup = InlineKeyboardMarkup().add(*keyboard_buttons)
    return await message.reply(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π?', reply_markup=markup)


# ----------------–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç---------------------------


@dp.message_handler(commands=['get_id'])
async def process_get_id_command(message: types.Message):
    await message.reply(f"ID –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}\n"
                        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")


async def get_chat_data(state) -> str:
    data = await state.get_data()
    return data['chat_id']


@dp.callback_query_handler(text='add_chat')
async def process_add_chat(call, state):
    chat_id = await get_chat_data(state)
    database.create_tg_subscription(call.from_user.id, chat_id)
    await call.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —á–∞—Ç {chat_id}")


@dp.callback_query_handler(text='remove_chat')
async def process_remove_chat(call, state):
    chat_id = await get_chat_data(state)
    database.remove_tg_subscription(call.from_user.id, chat_id)
    await call.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —á–∞—Ç–∞ {chat_id}")


@dp.callback_query_handler(text='mute_chat')
async def process_mute_chat(call, state):
    chat_id = await get_chat_data(state)
    database.toggle_mute_for_tg_subscription(call.from_user.id, chat_id)
    await call.message.edit_text(f"–í–∫–ª—é—á–µ–Ω —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞ {chat_id}")


@dp.callback_query_handler(text='unmute_chat')
async def process_unmute_chat(call, state):
    chat_id = await get_chat_data(state)
    database.toggle_mute_for_tg_subscription(call.from_user.id, chat_id)
    await call.message.edit_text(f"–í—ã–∫–ª—é—á–µ–Ω —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞ {chat_id}")


@dp.message_handler(commands=['chat'])
async def process_chat_command(message: types.Message, state):
    if ' ' not in message.text:
        await message.reply(f"–£–∑–Ω–∞—Ç—å ID —á–∞—Ç–∞ –º–æ–∂–Ω–æ, –Ω–∞–ø–∏—Å–∞–≤ –≤ –Ω—É–∂–Ω–æ–π –±–µ—Å–µ–¥–µ –∫–æ–º–∞–Ω–¥—É /get_id ;)\n"
                        f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    chat_id = re.split(' ', message.text, maxsplit=3)
    try:
        chat_id = int(chat_id[1])
        await state.update_data(chat_id=chat_id)
    except ValueError:
        return await message.reply(f"–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ :)")

    buttons = []
    subscription = database.get_tg_subscription(user_id=message.from_user.id, chat_id=chat_id)
    return await build_menu(message, subscription, 'chat')


@dp.message_handler(lambda message: len(database.get_tg_subscriptions_by_chat(message.chat.id)))
async def process_chat_message(message: types.Message):
    should_notify = message_classifier.is_important(message.text)
    if should_notify:
        subscriptions = database.get_tg_subscriptions_by_chat(message.chat.id)
        for sub in subscriptions:
            await send_message(sub.user_id, f'–í —á–∞—Ç "{message.chat.title}" –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', disable_notification=sub.muted)
            await send_message(sub.user_id, message.text, disable_notification=sub.muted)
            if sub.muted:
                await send_message(
                    sub.user_id,
                    "–í–Ω–∏–º–∞–Ω–∏–µ: —É –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º, –ø–æ—ç—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –±–µ–∑–∑–≤—É—á–Ω–æ–µ",
                    disable_notification=sub.muted,
                )


# ------------------–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã-------------------


async def get_sheet_data(state):
    data = await state.get_data()
    return data['sheet_link'], data['sheet_range']


@dp.callback_query_handler(text_contains='add_sheet')
async def process_add_sheet(call, state):
    sheet_link, sheet_range = await get_sheet_data(state)
    database.create_sheet_subscription(call.from_user.id, sheet_link, sheet_range)
    await call.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–µ–∫ {sheet_range} —Ç–∞–±–ª–∏—Ü—ã {sheet_link}")


@dp.callback_query_handler(text_contains='remove_sheet')
async def process_remove_sheet(call, state):
    sheet_link, sheet_range = await get_sheet_data(state)
    database.delete_sheet_subscription(call.from_user.id, sheet_link, sheet_range)
    await call.message.edit_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–µ–∫ {sheet_range} —Ç–∞–±–ª–∏—Ü—ã {sheet_link}")


@dp.callback_query_handler(text='mute_sheet')
async def process_mute_sheet(call, state):
    sheet_link, sheet_range = await get_sheet_data(state)
    database.toggle_mute_for_sheet_subscription(call.from_user.id, sheet_link, sheet_range)
    await call.message.edit_text(f"–í–∫–ª—é—á–µ–Ω —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞ —è—á–µ–µ–∫ {sheet_range} —Ç–∞–±–ª–∏—Ü—ã {sheet_link}")


@dp.callback_query_handler(text='unmute_sheet')
async def process_unmute_sheet(call, state):
    sheet_link, sheet_range = await get_sheet_data(state)
    database.toggle_mute_for_sheet_subscription(call.from_user.id, sheet_link, sheet_range)
    await call.message.edit_text(f"–í—ã–∫–ª—é—á–µ–Ω —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞ —è—á–µ–µ–∫ {sheet_range} —Ç–∞–±–ª–∏—Ü—ã {sheet_link}")


@dp.message_handler(commands=['sheet'])
async def process_sheet_command(message: types.Message, state):
    input_str = re.split(' ', message.text, maxsplit=3)
    try:
        _, sheet_link, sheet_range = input_str
        await state.update_data(sheet_link=sheet_link)
        await state.update_data(sheet_range=sheet_range)
    except ValueError:
        return await message.reply(f"–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ URL –∏–ª–∏ —è—á–µ–π–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ :)")

    subscription = database.get_sheet_subscription(user_id=message.from_user.id, sheet_link=sheet_link, sheet_range=sheet_range)
    return await build_menu(message, subscription, 'sheet')


# --------------------------------------------------------


if __name__ == '__main__':
    executor.start_polling(dp)
